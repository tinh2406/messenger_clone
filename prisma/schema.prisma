// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation(fields: [seenMessageIds], references: [id], name: "Seen")

  account  Account?
  messages Message[]
}

model Account {
  userId            String  @id @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String
  access_token      String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id])
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name      String?
  isGroup   Boolean?

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  // messageIds String[] @db.ObjectId
  messages Message[] @relation("messages")

  lastMessageAt DateTime?
  lastMessageId String?   @db.ObjectId
  lastMessage   Message?  @relation("lastOf", fields: [lastMessageId], references: [id],onDelete: NoAction, onUpdate: NoAction)

  @@index([lastMessageAt])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation(fields: [seenIds], references: [id], name: "Seen")

  conversationId String       @db.ObjectId
  conversation   Conversation @relation("messages", fields: [conversationId], references: [id])

  lastOfIds String[]   @db.ObjectId
  lastOf   Conversation[] @relation("lastOf")

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id])

  @@index([conversationId, createdAt], name: "idx_conversation_createdAt")
}
